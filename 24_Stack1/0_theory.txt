stack example -> CD stack

FILO/LIFO
stack ke teeen hi operation to po push size empty
st.size()   -> returns the current size of stack...
st.empty() -> returns true if the stack is empty 

insertion of element in stack happens only at the top
deletion of element in stack happens only at the top 
fetch element from the top only

---   
v.push_back(5) -> peeche se add kar dega..
v.pop_back()   -> removes element from the back

.. ye mai bhul jaata hu..
v.erase(v.begin())   -> removes first element from beginning...


add , delete , get at a given index -> T.C. = O(n)   , S.C. = O(n)

stack provides us discipline and provides us intuition 

arrays mai O(n) isliye insertion deletion mai lag jaata hai...kyuki aur elements 
ko aage slide bhi to karna padta hai....


--- time complexity 

        arrays   vs     LinkedLists      vs       stacks
get     O(1)            O(n)                      O(n)
insert  O(n)            O(n)                      O(n)
delete  O(n)            O(n)                      O(n)


--- space complexity 

        arrays   vs     LinkedLists      vs       stacks
get     O(1)            O(1)                      O(n)
insert  O(n)            O(1)                      O(n)
delete  O(n)            O(1)                      O(n)


----

stack ka unlimited size...
so rarely stack overflow comes ...

--> if in an empty stack if I try to perform st.pop() or st.top() then 
segmentation fault comes...


browser mai aage peeche page kiya linking page

a graph is a collection of node where each node might point to each other..
the node represent real life entities and are connected by edges representing 
relationship between the nodes/entities...


---- graphs applications ---
google maps 
splitwise 
game ko download karne ke liye dependencies resolution...
dependency resolution

G = (V, E)   -> ordering matters


undirected , directed graph (facebook)
directed graph (instagram linkedin)

edgeweights -> weighted unweighted 

facebook mai happy birthday between two friends


------ types of graphs ------

multigraph -> an undirected graph in which multiple edges are allowed between two nodes...

simple graph -> an undirected graph in which both multiple edges and loops are not allowed...

complete graph ->  a complete graph is the one in which every node is directly connected 
to every other node..
=> a direct edge will exist for every possible pair...

 connected graph -> in this graph we have a direct or indirect path for every 
 possible pair of vertex...

 disconnected graph -> two island 

 path -> path is a graph whose vertices can be arranged in a sequence.

 cycle -> a cycle is also a graph whose vertices can be arranged in cyclic sequence..

 DAG (directed acyclic graph) -> ek taraf se hi relation hoga...

 degree -> degree of a VERTEX in a graph is the total number of edges incident to it 
 or away from it..


 outdegree -> total number of edges going outwards...
 indegree -> total number of edges going inwards...

 trees bhi aapka ek tarah se graph hi hota hai...
 i.e. trees are connected graph without cycle (tree = CAG) connected** acyclic graph

 if we remove an edge from a tree and it no more remain connected then it will now be called forest 
 (poonam rani)...

 if there is a disconnected graph then the set of vertices which are connected form a connected component...

 --- facts ---

 e = v - 1  (tree)

 e = v - 1 (forest -> max v-1 tak hi ho sakta hai..)

 e = v - 1  (connected ke case mai min v-1)

 e = vc2  (max in undirected complete graph )  vcombination2
 
e = v * (v-1)   (max in directed complete graph )


----- various ways of graph implementation --------

way1 (noob approach) -> node aur edge ki class bana li 
        edgelist representation 

class Node{
    int data;
};

class Edge{
    int src;
    int dest;
    int wt;
    bool dir;
};


class Graph{
    vector <edge> edges;
    vector <node> vertices;
};

ye leetcode pe aa sakta hai jab int v, vector edges de denge..


--------way2 (my approach 99 percent)--- -> here we represent graph as array of linkedlist

yaha array will represent vertices(akash)

array ka ith index pe rakhi chheje mujhe neighbours ke baare mai batayengi....
the neighbours info is stored in a linked list...

where neighbour is any node having direct edge from vertex..

-----
for directed graph 
    1 se 5 tak jaa sakte hai matlab 1 ka neighbour 5 hai....but 5 ka neighbour 1 nahi hoga...

------ how to implement directed weighted and undirected weighted graph ??--------
instead of storing a single integer we can store a pair...

pair ka first parameter -> neighbour batayega..
and second parameter -> weight batayega..


---- adjacency map se bhi undirected weighted graph implement ho jaega.. -----
here we represent graphs in the form of array of hashmaps/unordered map

array -> vertex 
hashmaps -> neighbour represent karega..

ith index of the array represent data of ith vertex....

key value pair of hashmaps mai key aapka neighbour and value mai weight store kar li....

this approach is good to find whether b is a neighbour of a ?


agar unweighted graph hai to hashmap ki jagah unordered_set lelo


---------way3 -> adjacency matrix ----------

here we represent the graph in a 2d array or matrix of v*v dimension
where v is the number of vertices 

adj[i][j] =  1    represents that there is an edge from vertex i to vertex j

for weighted graph 

adj[i][j] = {bool, weight} === {1,36} 
ha edge hai aur weight 36 hai....

above approach is not space optimised...


---- dense vs sparse graph ----
dense mai bahut jyada edges hoti hai... complete banne ki kosis karta hai...



---- extra (not imp) way4 -> incident matrix ----

in this approach we prepare a v*e matrix 

m[i][j] = {
    1 -> if the ith vertex i belongs to jth vertex
}

self loop ke liye 2 likh diya...

column sum = 2



--- summary : use adjacency list ----
you would say like ki vector < list <int> > graph;  ki jagah 
vector <vector <int> > graph     kyu nahi implement kar rahe ....because 
list (or linkedlist) is more space optimised than vector ....vector thoda jyada 
space leta rehta hai...





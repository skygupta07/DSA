Trick 1 =>=> to check if a number is odd or even ...we do modulo 2 operation and check the Remainder:
    if Remainder == 0 => even
    if Remainder == 1 => odd

but better approach is using the bit manipulation...
    if (x&1) == 0 => even
    if (x&1) == 1 => odd
    

actually aapka xand1 aapko least significant bit laake deta ha us number ke binary 
representation ka....
    if that bit is 1 => number will be damn sure odd.....


Trick 2 =>=> check if a number is a power of 2
    x & (x-1)   if gives = 0 => number is power of 2
                if gives > 0 => number is not a power of 2
    

--> but this doesn't work if x == 0

bool powerOf2(int x){
    return x && !(x && (x-1));
}

-------
Trick 3
kth bit matlab kth least significant bit from the right......

remember    1<<k = 2powerk

// left shift yaha karke just uske below ek apni bit ko 1 kiya and then AND karke dekha..
1. to check if the kth bit is set x && (1<<k) == 1 => bit is set else not set
    to check if the kth bit is set or not using the right shift operator...
        if ((x>>i) & 1 == 1) bit is set else not set....

2. toggle the kth bit x ^ (1<<k)
3. set the kth bit x | (1<<k)
4. unset/clear the kth bit x & ~(1<<k)

Trick 4-------------

-> if you want to multiply the number by 2 power k then simply left shift the number by  k steps..
-> if you want to divide the number by 2 power k , then simply right shift the number by k steps...


x * 2powerk === x << k

-------
2powerk matlab      1000000 msb 1 and aage ke saare zero...
2powerk - 1 matlab msb 0 then aage ke saare 1 ....


Trick 5
----- how to find out x % 2powerk
    x & ((1<<k) - 1)

Trick 6 --------
swapping two number without using a extra temporary variable....using simple xor operations..
int temp = a;
a = b;
b = a;

a = a^b;
b = a^b;
a = a^b;

Trick 7 or property 7 -----------
    number of set bits in A = x
    number of set bits in B = y
    number of set bits in A^B = z 

    then: 
        z is even if x+y is even
        z is odd if x+y is odd

Trick 8 --------
if (x == A) x = B
if (x == B) x = A
        x = a^b^x;


Trick 9 --------

a+b = (a^b) + 2(a&b)
a+b = a|b + a&b


Trick 10 --------
-> finding number of set bits in a number x...
    __builtin_popcount(x)     -> x is an int
    __builtin_popcountll(x)    -> x is a long long...




a^b help us to obtain all the bit which are not same in both a and b...
a&b help us to obtain all the bit which are same in both a and b ....and it is added twice....










1<<0         1
1<<1         10
1<<2         100
1<<3         1000   => aur yeh acchi trick bhi hai ki kth bit ko 1 kar raha hu and saare
                            ke saare ke aapke zero hai...
this is helpful to put 1 underneath the kth bit....


if you are converting n to n-1 then simply aap rightmost 1 bit ko 0 kardo and then uske
aage ke saare 1 kar do....

trick 11 ----------------
removing the last set bit(rightmost)
    just do x & (x-1)


